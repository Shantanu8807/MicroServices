package com.account.service.impl;

import java.time.LocalDateTime;
import java.util.Random;

import org.springframework.stereotype.Service;

import com.account.contants.Constants;
import com.account.dto.AccountsDto;
import com.account.dto.CustomerDto;
import com.account.entity.Accounts;
import com.account.entity.Customer;
import com.account.exception.CustomerAlreadyExistsException;
import com.account.exception.ResourceNotFoundException;
import com.account.mapper.CustomerMapper;
import com.account.repo.AccountRepo;
import com.account.repo.CustomerRepo;
import com.account.service.IAccountsService;

@Service
public class AccountServiceImpl implements IAccountsService {

	private AccountRepo accountRepo;
	private CustomerRepo customerRepo;

	@Override
	public void createAccount(CustomerDto customerDto) {
		Customer cus=customerRepo.findByMobileNumber(customerDto.getMobileNumber());
		if(cus==null)
		{
			throw new CustomerAlreadyExistsException("Customer Already Exists with this mobile number");
		}
		Customer customer = new Customer();
		customer = CustomerMapper.mapToCustomer(customerDto, customer);
		customer.setCreatedAt(LocalDateTime.now());
		customer.setCreatedBy("Anonymus");
		Customer savedCustomer =customerRepo.save(customer);
		
		Accounts newAccount=createNewAccount(savedCustomer);
		
		
		accountRepo.save(newAccount);
	}
	
	private Accounts createNewAccount(Customer customer)
	{
		Accounts newAccount=new Accounts();
		newAccount.setCustomerId(customer.getCustomerId());
		long randomAccNumber=1000000000L + new Random().nextInt(90000000);
		newAccount.setAccountNumber(randomAccNumber);
		newAccount.setAccoutnType(Constants.SAVINGS);
		newAccount.setBranchAddress(Constants.Address);
		newAccount.setCreatedAt(LocalDateTime.now());
		newAccount.setCreatedBy("Anonymus");
		return newAccount;
	}

	@Override
	public CustomerDto fetchAccount(String mobileNumber) {
		Customer customer=customerRepo.findByMobileNumber(mobileNumber);
		if(customer==null)
		{
			throw new ResourceNotFoundException("no Customer found with mobile number "+mobileNumber);
		}
		
		Accounts account=accountRepo.findByCustomerId(customer.getCustomerId());
		if(account==null)
		{
			throw new ResourceNotFoundException("no account found with mobile number "+mobileNumber);
		}
		CustomerDto customerDto=new CustomerDto();
		customerDto=CustomerMapper.mapToCustomerDto(customer, customerDto);		
		AccountsDto accountDto= new AccountsDto();
		customerDto.setAccountsDto();
		return null;
	}

}
