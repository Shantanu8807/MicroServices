spring.application.name=accounts


spring.profiles.active=qa


spring.config.import=optional:configserver:http://localhost:8071/
spring.cloud.config.uri=http://localhost:8071


server.port=8080



#connecting with eureka server 
eureka.instance.prefer-ip-address=true
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://localhost:8070/eureka/

info.app.name=accounts
info.app.description=account microservice
info.app.version=1.0.0
management.info.env.enabled=true
management.endpoint.shutdown.enabled=true

endpoints.shutdown.enabled=true

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true


#this is used to get the latest details from config server with out restarting the service just need to call http://localhost:8080/actuator/refresh
#this advantage of this is that we have to call referesh api for every microservice 
#to overcome this we use spring cloud bus and rabbit mq
management.endpoints.web.exposure.include=*

spring.cloud.stream.bindings.sendCommunication-out-0=output
spring.cloud.stream.bindings.sendCommunication-out-0.destination=send-communication
spring.cloud.function.definition=updateCommunication
spring.cloud.stream.bindings.updateCommunication-in-0=input
spring.cloud.stream.bindings.updateCommunication-in-0.destination=communication-sent


spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#build.version="1.0"

#commmented all properties of prod and qa because now fetching the properties of both the profiles from config server 


logging.level.com.account=debug


#this is to enable circuit breaking at service level 
spring.cloud.openfeign.circuitbreaker.enabled=true



#for retry mechanism we need properties like 
resilience4j.retry.configs.default.max-attempts=3
resilience4j.retry.configs.default.wait-duration=500ms

#retry only occurs for this exceptions
resilience4j.retry.configs.default.retry-exceptions=java.io.IOException,java.util.concurrent.TimeoutException


#retry will not happen for this exceptions
resilience4j.retry.configs.default.ignore-exceptions=java.lang.IllegalArgumentException

# Exponential backoff configuration
resilience4j.retry.configs.default.enable-exponential-backoff=true
resilience4j.retry.configs.default.exponential-backoff-multiplier=2.0
resilience4j.retry.configs.default.exponential-max-wait-duration=2s


#for redis properties 
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.connect-timeout=2s

#we can use apache bechmark for sending multiple request to server 


# Redis Rate Limiter configuration
# Default rate limiter configuration
resilience4j.ratelimiter.configs.default.timeout-duration=5s
resilience4j.ratelimiter.configs.default.limit-for-period=10
resilience4j.ratelimiter.configs.default.limit-refresh-period=1s

# Instance-specific rate limiter configuration
resilience4j.ratelimiter.instances.myService.timeout-duration=5s
resilience4j.ratelimiter.instances.myService.limit-for-period=10
resilience4j.ratelimiter.instances.myService.limit-refresh-period=1s
